{
  "openapi": "3.0.0",
  "info": {
    "title": "AREA API",
    "description": "Action-REAction automation platform API - MVP",
    "version": "1.0.0",
    "contact": {
      "name": "AREA Team",
      "email": "contact@area.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Development server"
    }
  ],
  "tags": [
    {
      "name": "Public",
      "description": "Public endpoints (no authentication required)"
    },
    {
      "name": "Authentication",
      "description": "User authentication and registration"
    },
    {
      "name": "OAuth2",
      "description": "OAuth2 authentication with Google, GitHub, Facebook"
    },
    {
      "name": "Services",
      "description": "Available services (Timer, Webhook, Gmail)"
    },
    {
      "name": "Areas",
      "description": "Automation workflows management"
    },
    {
      "name": "Webhooks",
      "description": "Webhook triggers"
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "tags": ["Public"],
        "summary": "Health check",
        "description": "Check if the server is running",
        "responses": {
          "200": {
            "description": "Server is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "OK"
                    },
                    "timestamp": {
                      "type": "integer",
                      "example": 1704067200000
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/about.json": {
      "get": {
        "tags": ["Public"],
        "summary": "Get server info and available services",
        "description": "Returns server information and list of all available services with their actions and reactions",
        "responses": {
          "200": {
            "description": "Server information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AboutResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Register a new user",
        "description": "Create a new user account and get JWT tokens",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Registration failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Login",
        "description": "Authenticate user and get JWT tokens",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Refresh access token",
        "description": "Get a new access token using a refresh token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": {
                    "type": "string",
                    "description": "Refresh token"
                  }
                },
                "required": ["refreshToken"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/oauth/init": {
      "post": {
        "tags": ["OAuth2"],
        "summary": "Initialize OAuth2 flow",
        "description": "Get the authorization URL for OAuth2 authentication",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuth2InitRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authorization URL generated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2AuthUrlResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid provider or configuration"
          }
        }
      }
    },
    "/api/auth/oauth/providers": {
      "get": {
        "tags": ["OAuth2"],
        "summary": "Get available OAuth2 providers",
        "description": "Returns list of configured OAuth2 providers",
        "responses": {
          "200": {
            "description": "List of providers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2ProvidersResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/oauth/{provider}/callback": {
      "get": {
        "tags": ["OAuth2"],
        "summary": "OAuth2 callback",
        "description": "Callback URL for OAuth2 providers (web flow)",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["google", "github", "facebook"]
            }
          },
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Authorization code"
          },
          {
            "name": "state",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "State parameter for CSRF protection"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to frontend with tokens"
          },
          "400": {
            "description": "Invalid code or provider"
          }
        }
      }
    },
    "/api/auth/oauth/{provider}/token": {
      "post": {
        "tags": ["OAuth2"],
        "summary": "Exchange code for tokens",
        "description": "Exchange authorization code for JWT tokens (mobile flow)",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["google", "github", "facebook"]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuth2TokenExchangeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tokens generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2TokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid code or provider"
          }
        }
      }
    },
    "/api/auth/oauth/link": {
      "post": {
        "tags": ["OAuth2"],
        "summary": "Link OAuth2 account",
        "description": "Link an OAuth2 provider to existing user account",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuth2LinkAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account linked successfully"
          },
          "400": {
            "description": "Provider already linked or invalid"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/auth/oauth/unlink": {
      "delete": {
        "tags": ["OAuth2"],
        "summary": "Unlink OAuth2 account",
        "description": "Unlink an OAuth2 provider from user account",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuth2UnlinkAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account unlinked successfully"
          },
          "400": {
            "description": "Cannot unlink last authentication method"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/auth/oauth/linked-accounts": {
      "get": {
        "tags": ["OAuth2"],
        "summary": "Get linked OAuth2 accounts",
        "description": "Get list of OAuth2 accounts linked to user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of linked accounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2LinkedAccountsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/services": {
      "get": {
        "tags": ["Services"],
        "summary": "Get all services",
        "description": "Returns list of all available services with their actions and reactions",
        "responses": {
          "200": {
            "description": "List of services",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Service"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/services/{id}": {
      "get": {
        "tags": ["Services"],
        "summary": "Get service by ID",
        "description": "Returns detailed information about a specific service",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Service ID (MongoDB ObjectId)"
          }
        ],
        "responses": {
          "200": {
            "description": "Service details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "404": {
            "description": "Service not found"
          }
        }
      }
    },
    "/api/areas": {
      "get": {
        "tags": ["Areas"],
        "summary": "Get all user's AREAs",
        "description": "Returns list of all AREAs created by the authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of AREAs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Area"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": ["Areas"],
        "summary": "Create a new AREA",
        "description": "Create a new automation workflow",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAreaRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "AREA created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Area"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/areas/{id}": {
      "get": {
        "tags": ["Areas"],
        "summary": "Get AREA by ID",
        "description": "Returns detailed information about a specific AREA",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "AREA ID (MongoDB ObjectId)"
          }
        ],
        "responses": {
          "200": {
            "description": "AREA details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Area"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - not owner of this AREA"
          },
          "404": {
            "description": "AREA not found"
          }
        }
      },
      "patch": {
        "tags": ["Areas"],
        "summary": "Update AREA",
        "description": "Update AREA name, description or active status",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "AREA ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAreaRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "AREA updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Area"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "AREA not found"
          }
        }
      },
      "delete": {
        "tags": ["Areas"],
        "summary": "Delete AREA",
        "description": "Delete an AREA permanently",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "AREA ID"
          }
        ],
        "responses": {
          "204": {
            "description": "AREA deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "AREA not found"
          }
        }
      }
    },
    "/api/areas/{id}/activate": {
      "post": {
        "tags": ["Areas"],
        "summary": "Activate AREA",
        "description": "Activate an AREA to start automatic execution",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "AREA ID"
          }
        ],
        "responses": {
          "200": {
            "description": "AREA activated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Area"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "AREA not found"
          }
        }
      }
    },
    "/api/areas/{id}/deactivate": {
      "post": {
        "tags": ["Areas"],
        "summary": "Deactivate AREA",
        "description": "Deactivate an AREA to stop automatic execution",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "AREA ID"
          }
        ],
        "responses": {
          "200": {
            "description": "AREA deactivated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Area"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "AREA not found"
          }
        }
      }
    },
    "/api/areas/{id}/test": {
      "post": {
        "tags": ["Areas"],
        "summary": "Test AREA",
        "description": "Manually trigger an AREA execution for testing",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "AREA ID"
          }
        ],
        "responses": {
          "200": {
            "description": "AREA test triggered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Area test triggered successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "AREA not found"
          }
        }
      }
    },
    "/api/areas/{id}/executions": {
      "get": {
        "tags": ["Areas"],
        "summary": "Get AREA execution history",
        "description": "Returns list of executions for a specific AREA",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "AREA ID"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 50
            },
            "description": "Maximum number of executions to return"
          }
        ],
        "responses": {
          "200": {
            "description": "List of executions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AreaExecution"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "AREA not found"
          }
        }
      }
    },
    "/api/webhooks/{serviceId}/{hookId}": {
      "post": {
        "tags": ["Webhooks"],
        "summary": "Trigger webhook",
        "description": "Trigger a webhook to execute associated AREAs",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Service ID (MongoDB ObjectId)"
          },
          {
            "name": "hookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique hook identifier"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Any JSON payload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook triggered successfully"
          },
          "400": {
            "description": "Invalid request"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token obtained from /api/auth/login or /api/auth/register"
      }
    },
    "schemas": {
      "RegisterRequest": {
        "type": "object",
        "required": ["email", "password", "username"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "mySecurePassword123"
          },
          "username": {
            "type": "string",
            "example": "johndoe"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "mySecurePassword123"
          }
        }
      },
      "TokenResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "JWT access token (valid for 15 minutes)",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "refreshToken": {
            "type": "string",
            "description": "JWT refresh token (valid for 7 days)",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "expiresIn": {
            "type": "integer",
            "description": "Token expiration time in seconds",
            "example": 900
          },
          "tokenType": {
            "type": "string",
            "example": "Bearer"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "authentication_failed"
          },
          "message": {
            "type": "string",
            "example": "Invalid credentials"
          }
        }
      },
      "AboutResponse": {
        "type": "object",
        "properties": {
          "client": {
            "type": "object",
            "properties": {
              "host": {
                "type": "string",
                "example": "127.0.0.1"
              }
            }
          },
          "server": {
            "type": "object",
            "properties": {
              "current_time": {
                "type": "integer",
                "description": "Current server time (Unix timestamp)",
                "example": 1704067200
              },
              "services": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Timer"
                    },
                    "actions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "example": "Every X seconds"
                          },
                          "description": {
                            "type": "string",
                            "example": "Trigger every X seconds"
                          }
                        }
                      }
                    },
                    "reactions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "example": "Wait X seconds"
                          },
                          "description": {
                            "type": "string",
                            "example": "Wait for X seconds"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Service": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "MongoDB ObjectId",
            "example": "507f1f77bcf86cd799439011"
          },
          "name": {
            "type": "string",
            "example": "Timer"
          },
          "displayName": {
            "type": "string",
            "example": "Timer Service"
          },
          "description": {
            "type": "string",
            "example": "Schedule actions based on time"
          },
          "category": {
            "type": "string",
            "example": "Productivity"
          },
          "requiresAuth": {
            "type": "boolean",
            "example": false
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Action"
            }
          },
          "reactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reaction"
            }
          }
        }
      },
      "Action": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "every_x_seconds"
          },
          "name": {
            "type": "string",
            "example": "Every X seconds"
          },
          "description": {
            "type": "string",
            "example": "Trigger every X seconds"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Parameter"
            }
          }
        }
      },
      "Reaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "wait"
          },
          "name": {
            "type": "string",
            "example": "Wait X seconds"
          },
          "description": {
            "type": "string",
            "example": "Wait for X seconds before continuing"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Parameter"
            }
          }
        }
      },
      "Parameter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "interval"
          },
          "type": {
            "type": "string",
            "example": "string"
          },
          "required": {
            "type": "boolean",
            "example": true
          },
          "description": {
            "type": "string",
            "example": "Interval in seconds"
          }
        }
      },
      "CreateAreaRequest": {
        "type": "object",
        "required": ["name", "action", "reactions"],
        "properties": {
          "name": {
            "type": "string",
            "example": "My automation"
          },
          "description": {
            "type": "string",
            "example": "Trigger webhook every 60 seconds"
          },
          "action": {
            "type": "object",
            "required": ["serviceId", "actionId", "config"],
            "properties": {
              "serviceId": {
                "type": "string",
                "description": "Service MongoDB ObjectId",
                "example": "507f1f77bcf86cd799439011"
              },
              "actionId": {
                "type": "string",
                "example": "every_x_seconds"
              },
              "config": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "example": {
                  "interval": "60"
                }
              }
            }
          },
          "reactions": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["serviceId", "reactionId", "config"],
              "properties": {
                "serviceId": {
                  "type": "string",
                  "example": "507f1f77bcf86cd799439012"
                },
                "reactionId": {
                  "type": "string",
                  "example": "call_webhook"
                },
                "config": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "example": {
                    "url": "https://webhook.site/xxx",
                    "method": "POST"
                  }
                }
              }
            }
          }
        }
      },
      "UpdateAreaRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Updated name"
          },
          "description": {
            "type": "string",
            "example": "Updated description"
          },
          "active": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "Area": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "MongoDB ObjectId",
            "example": "507f1f77bcf86cd799439013"
          },
          "userId": {
            "type": "string",
            "description": "Owner user ID",
            "example": "507f1f77bcf86cd799439014"
          },
          "name": {
            "type": "string",
            "example": "My automation"
          },
          "description": {
            "type": "string",
            "example": "Trigger webhook every 60 seconds"
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "action": {
            "type": "object",
            "properties": {
              "serviceId": {
                "type": "string",
                "example": "507f1f77bcf86cd799439011"
              },
              "actionId": {
                "type": "string",
                "example": "every_x_seconds"
              },
              "config": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "example": {
                  "interval": "60"
                }
              }
            }
          },
          "reactions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "serviceId": {
                  "type": "string",
                  "example": "507f1f77bcf86cd799439012"
                },
                "reactionId": {
                  "type": "string",
                  "example": "call_webhook"
                },
                "config": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "executionCount": {
            "type": "integer",
            "example": 42
          },
          "lastTriggeredAt": {
            "type": "integer",
            "description": "Unix timestamp in milliseconds",
            "example": 1704067200000
          },
          "createdAt": {
            "type": "integer",
            "description": "Unix timestamp in milliseconds",
            "example": 1704067200000
          },
          "updatedAt": {
            "type": "integer",
            "description": "Unix timestamp in milliseconds",
            "example": 1704067200000
          }
        }
      },
      "AreaExecution": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "MongoDB ObjectId",
            "example": "507f1f77bcf86cd799439015"
          },
          "areaId": {
            "type": "string",
            "example": "507f1f77bcf86cd799439013"
          },
          "status": {
            "type": "string",
            "enum": ["PENDING", "PROCESSING", "SUCCESS", "FAILED"],
            "example": "SUCCESS"
          },
          "actionData": {
            "type": "object",
            "description": "Data captured from action trigger",
            "example": {
              "triggered_at": 1704067200000,
              "interval": 60
            }
          },
          "error": {
            "type": "string",
            "description": "Error message if execution failed",
            "example": null
          },
          "startedAt": {
            "type": "integer",
            "description": "Unix timestamp in milliseconds",
            "example": 1704067200000
          },
          "completedAt": {
            "type": "integer",
            "description": "Unix timestamp in milliseconds",
            "example": 1704067205000
          }
        }
      },
      "OAuth2InitRequest": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": ["google", "github", "facebook"],
            "example": "google"
          },
          "redirectUri": {
            "type": "string",
            "description": "Optional redirect URI (uses default if not provided)",
            "example": "http://localhost:3000/auth/callback"
          },
          "state": {
            "type": "string",
            "description": "Optional state parameter for CSRF protection"
          }
        },
        "required": ["provider"]
      },
      "OAuth2AuthUrlResponse": {
        "type": "object",
        "properties": {
          "authUrl": {
            "type": "string",
            "description": "OAuth2 authorization URL",
            "example": "https://accounts.google.com/o/oauth2/v2/auth?client_id=..."
          },
          "state": {
            "type": "string",
            "description": "State parameter for CSRF protection"
          }
        }
      },
      "OAuth2TokenExchangeRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Authorization code from OAuth provider"
          },
          "redirectUri": {
            "type": "string",
            "description": "Redirect URI used in authorization request"
          },
          "state": {
            "type": "string",
            "description": "State parameter for CSRF protection"
          }
        },
        "required": ["code", "redirectUri"]
      },
      "OAuth2TokenResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "JWT access token"
          },
          "refreshToken": {
            "type": "string",
            "description": "JWT refresh token"
          },
          "expiresIn": {
            "type": "integer",
            "description": "Token expiration time in milliseconds",
            "example": 900000
          },
          "tokenType": {
            "type": "string",
            "example": "Bearer"
          },
          "user": {
            "$ref": "#/components/schemas/UserResponse"
          }
        }
      },
      "OAuth2ProvidersResponse": {
        "type": "object",
        "properties": {
          "providers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OAuth2ProviderInfo"
            }
          }
        }
      },
      "OAuth2ProviderInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "google"
          },
          "displayName": {
            "type": "string",
            "example": "Google"
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "iconUrl": {
            "type": "string",
            "example": "https://www.google.com/favicon.ico"
          }
        }
      },
      "OAuth2LinkAccountRequest": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": ["google", "github", "facebook"]
          },
          "accessToken": {
            "type": "string",
            "description": "OAuth access token from provider"
          }
        },
        "required": ["provider", "accessToken"]
      },
      "OAuth2UnlinkAccountRequest": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": ["google", "github", "facebook"]
          }
        },
        "required": ["provider"]
      },
      "OAuth2LinkedAccountsResponse": {
        "type": "object",
        "properties": {
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OAuth2LinkedAccount"
            }
          }
        }
      },
      "OAuth2LinkedAccount": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "example": "google"
          },
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "linkedAt": {
            "type": "string",
            "description": "Timestamp when account was linked"
          },
          "displayName": {
            "type": "string",
            "example": "Google"
          }
        }
      }
    }
  }
}
